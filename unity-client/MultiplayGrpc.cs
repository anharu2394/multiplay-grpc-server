// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: multiplay.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Anharu {
  public static partial class Multiplay
  {
    static readonly string __ServiceName = "anharu.Multiplay";

    static readonly grpc::Marshaller<global::Anharu.GetUsersRequest> __Marshaller_anharu_GetUsersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Anharu.GetUsersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Anharu.GetUsersResponse> __Marshaller_anharu_GetUsersResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Anharu.GetUsersResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Anharu.SetPositionRequest> __Marshaller_anharu_SetPositionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Anharu.SetPositionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Anharu.SetPositionResponse> __Marshaller_anharu_SetPositionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Anharu.SetPositionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Anharu.ConnectPositionRequest> __Marshaller_anharu_ConnectPositionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Anharu.ConnectPositionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Anharu.ConnectPositionResponse> __Marshaller_anharu_ConnectPositionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Anharu.ConnectPositionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Anharu.GetUsersRequest, global::Anharu.GetUsersResponse> __Method_GetUsers = new grpc::Method<global::Anharu.GetUsersRequest, global::Anharu.GetUsersResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetUsers",
        __Marshaller_anharu_GetUsersRequest,
        __Marshaller_anharu_GetUsersResponse);

    static readonly grpc::Method<global::Anharu.SetPositionRequest, global::Anharu.SetPositionResponse> __Method_SetPosition = new grpc::Method<global::Anharu.SetPositionRequest, global::Anharu.SetPositionResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "SetPosition",
        __Marshaller_anharu_SetPositionRequest,
        __Marshaller_anharu_SetPositionResponse);

    static readonly grpc::Method<global::Anharu.ConnectPositionRequest, global::Anharu.ConnectPositionResponse> __Method_ConnectPosition = new grpc::Method<global::Anharu.ConnectPositionRequest, global::Anharu.ConnectPositionResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "ConnectPosition",
        __Marshaller_anharu_ConnectPositionRequest,
        __Marshaller_anharu_ConnectPositionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Anharu.MultiplayReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Multiplay</summary>
    public abstract partial class MultiplayBase
    {
      public virtual global::System.Threading.Tasks.Task GetUsers(global::Anharu.GetUsersRequest request, grpc::IServerStreamWriter<global::Anharu.GetUsersResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Anharu.SetPositionResponse> SetPosition(grpc::IAsyncStreamReader<global::Anharu.SetPositionRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ConnectPosition(grpc::IAsyncStreamReader<global::Anharu.ConnectPositionRequest> requestStream, grpc::IServerStreamWriter<global::Anharu.ConnectPositionResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Multiplay</summary>
    public partial class MultiplayClient : grpc::ClientBase<MultiplayClient>
    {
      /// <summary>Creates a new client for Multiplay</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MultiplayClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Multiplay that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MultiplayClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MultiplayClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MultiplayClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::Anharu.GetUsersResponse> GetUsers(global::Anharu.GetUsersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUsers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Anharu.GetUsersResponse> GetUsers(global::Anharu.GetUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetUsers, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Anharu.SetPositionRequest, global::Anharu.SetPositionResponse> SetPosition(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPosition(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Anharu.SetPositionRequest, global::Anharu.SetPositionResponse> SetPosition(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_SetPosition, null, options);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Anharu.ConnectPositionRequest, global::Anharu.ConnectPositionResponse> ConnectPosition(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectPosition(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Anharu.ConnectPositionRequest, global::Anharu.ConnectPositionResponse> ConnectPosition(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_ConnectPosition, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MultiplayClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MultiplayClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MultiplayBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetUsers, serviceImpl.GetUsers)
          .AddMethod(__Method_SetPosition, serviceImpl.SetPosition)
          .AddMethod(__Method_ConnectPosition, serviceImpl.ConnectPosition).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MultiplayBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetUsers, serviceImpl.GetUsers);
      serviceBinder.AddMethod(__Method_SetPosition, serviceImpl.SetPosition);
      serviceBinder.AddMethod(__Method_ConnectPosition, serviceImpl.ConnectPosition);
    }

  }
  public static partial class User
  {
    static readonly string __ServiceName = "anharu.User";

    static readonly grpc::Marshaller<global::Anharu.CreateUserRequest> __Marshaller_anharu_CreateUserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Anharu.CreateUserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Anharu.CreateUserResponse> __Marshaller_anharu_CreateUserResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Anharu.CreateUserResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Anharu.CreateUserRequest, global::Anharu.CreateUserResponse> __Method_Create = new grpc::Method<global::Anharu.CreateUserRequest, global::Anharu.CreateUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_anharu_CreateUserRequest,
        __Marshaller_anharu_CreateUserResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Anharu.MultiplayReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of User</summary>
    public abstract partial class UserBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Anharu.CreateUserResponse> Create(global::Anharu.CreateUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for User</summary>
    public partial class UserClient : grpc::ClientBase<UserClient>
    {
      /// <summary>Creates a new client for User</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UserClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for User that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UserClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UserClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UserClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Anharu.CreateUserResponse Create(global::Anharu.CreateUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Create(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Anharu.CreateUserResponse Create(global::Anharu.CreateUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Anharu.CreateUserResponse> CreateAsync(global::Anharu.CreateUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Anharu.CreateUserResponse> CreateAsync(global::Anharu.CreateUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UserClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UserClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(UserBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Create, serviceImpl.Create).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, UserBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Create, serviceImpl.Create);
    }

  }
}
#endregion
